name: Lighthouse
on:
  push:
    branches: [ main ]  # Запуск при push в main
  pull_request:         # Или при создании PR
  workflow_dispatch:    # Ручной запуск через UI
jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Update Actions
        run: |
          echo "Список доступных версий:"
          curl -s https://api.github.com/repos/actions/upload-artifact/tags | jq -r '.[].name'
      
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - name: Run Lighthouse CI
        id: run-lhci
        run: |
          # Запускаем Lighthouse и сохраняем логи в файл
          lhci autorun --config=./lighthouserc.json --save-assets 2>&1 | tee ./lighthouse-output.log || echo "::warning::Lighthouse run completed"
        
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Lighthouse Hash
        id: lh-hash
        run: |
          # Читаем лог из файла и ищем URL
          REPORT_URL=$(grep -o 'https://storage\.googleapis\.com/lighthouse-infrastructure\.appspot\.com/reports/[0-9-]\+\.report\.html' ./lighthouse-output.log || true)
          
          if [ -n "$REPORT_URL" ]; then
            # Извлекаем хеш из URL
            HASH=$(echo "$REPORT_URL" | sed 's|.*/reports/\([0-9-]*\)\.report\.html|\1|')
            echo "hash=${HASH}" >> $GITHUB_OUTPUT
            echo "Extracted Lighthouse hash: ${HASH}"
            
            # Дополнительно сохраняем хеш в файл
            echo "${HASH}" > ./lighthouse-hash.txt
          else
            echo "::error::Failed to extract Lighthouse report URL!"
            echo "hash=error" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Lighthouse Artifacts
        run: |
          mkdir -p lighthouse-artifacts
          # Копируем ВСЕ возможные файлы отчётов
          cp -a .lighthouseci/ lighthouse-artifacts/ 2>/dev/null || true
          # Сохраняем хеш отдельно
          echo "${{ steps.lh-hash.outputs.hash }}" > lighthouse-artifacts/latest-hash.txt

      - name: Upload Permanent Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.run_id }}
          path: lighthouse-artifacts/
          if-no-files-found: ignore

      - name: Debug Files
        run: |
          echo "Содержимое .lighthouseci/:"
          ls -la .lighthouseci/
          echo "Содержимое lhci_reports/:"
          ls -la lhci_reports/ || echo "Папка не существует"

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.lighthouseci/'

      - name: Extract Lighthouse Score
        id: lh-score
        run: |
          SCORE=$(jq -r '[.categories[]?.score? // 0 | . * 100 | floor] | max' .lighthouseci/lhr-*.json)
          echo "score=${SCORE}" >> $GITHUB_OUTPUT

      - name: Save Score to Pages
        run: |
          mkdir -p docs  # Создаём папку, если её нет
          echo ${{ steps.lh-score.outputs.score }} > docs/lighthouse-score.txt
        if: success()
