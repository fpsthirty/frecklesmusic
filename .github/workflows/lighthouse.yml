name: Lighthouse Analyze
on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Run Lighthouse CI
        id: run-lhci
        run: |
          lhci autorun --config=./lighthouserc.json --save-assets 2>&1 | tee ./lighthouse-output.log || echo "::warning::Lighthouse run completed"
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Lighthouse Metrics
        id: extract-metrics
        run: |
          mkdir -p docs

          if [ ! -f .lighthouseci/lhr-*.json ]; then
            echo "::error::No Lighthouse report found!"
            exit 1
          fi

          REPORT=$(ls -t .lighthouseci/lhr-*.json | head -1)

          # Сначала извлекаем все значения в переменные
          PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$REPORT")
          ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$REPORT")
          BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' "$REPORT")
          SEO=$(jq -r '.categories.seo.score * 100 | floor' "$REPORT")
          TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          # Формируем JSON с проверкой значений
          echo "{
            \"performance\": ${PERFORMANCE:-0},
            \"accessibility\": ${ACCESSIBILITY:-0},
            \"best_practices\": ${BEST_PRACTICES:-0},
            \"seo\": ${SEO:-0},
            \"timestamp\": \"${TIMESTAMP}\"
          }" > docs/frecklesmusic-lighthouse-metrics.json

          # Валидация JSON
          if ! jq empty docs/frecklesmusic-lighthouse-metrics.json 2>/dev/null; then
            echo "::error::Invalid JSON generated!"
            echo "Содержимое файла:"
            cat docs/frecklesmusic-lighthouse-metrics.json
            exit 1
          fi

      - name: Update Lighthouse Badge in Gist
        if: always()
        uses: actions/github-script@v6
        env:
          GIST_ID: "7b7563c9fbf4e1164894f86ed4284c18"
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs');
            const metrics = JSON.parse(fs.readFileSync('docs/frecklesmusic-lighthouse-metrics.json'));
            
            try {
              // Получаем текущий Gist
              const gist = await github.rest.gists.get({
                gist_id: process.env.GIST_ID
              });
              
              // Парсим существующие данные
              const existingContent = gist.data.files['frecklesmusic-lighthouse-metrics.json']?.content;
              const existingMetrics = existingContent ? JSON.parse(existingContent) : null;
              
              // Сравниваем метрики (игнорируя timestamp)
              const {timestamp: _, ...currentMetrics} = metrics;
              const {timestamp: __, ...oldMetrics} = existingMetrics || {};
              
              if (existingMetrics && JSON.stringify(oldMetrics) === JSON.stringify(currentMetrics)) {
                console.log('Метрики не изменились, пропускаем обновление Gist');
                return;
              }
              
              // Формируем данные для бейджа
              const badgeData = {
                schemaVersion: 1,
                label: "",
                message: [
                  `performance: ${metrics.performance}`,
                  `accessibility: ${metrics.accessibility}`,
                  `best practices: ${metrics.best_practices}`,
                  `SEO: ${metrics.seo}`
                ].join(' | '),
                color: getColor(metrics.performance),
                namedLogo: "lighthouse",
                style: "flat"
              };
              
              // Обновляем Gist
              await github.rest.gists.update({
                gist_id: process.env.GIST_ID,
                files: {
                  'frecklesmusic-lighthouse-metrics.json': {
                    content: JSON.stringify(metrics, null, 2)
                  },
                  'frecklesmusic-lighthouse-badge.json': {
                    content: JSON.stringify(badgeData, null, 2)
                  }
                }
              });
              
              console.log('Gist успешно обновлен!');
              
            } catch (error) {
              if (error.status === 404) {
                console.log('Gist не найден, создаем новый');
                await createNewGist();
              } else {
                console.error('Ошибка при обновлении Gist:', error);
                throw error;
              }
            }
            
            function getColor(performanceScore) {
              if (score >= 90) return 'brightgreen';
              if (score >= 80) return 'green';
              if (score >= 60) return 'yellow';
              if (score >= 40) return 'orange';
              return 'red';
            }
            
            async function createNewGist() {
              const {performance, accessibility, best_practices, seo} = metrics;
              const badgeData = {
                schemaVersion: 1,
                label: "Lighthouse",
                message: `P${performance} A${accessibility} B${best_practices} S${seo}`,
                color: getColor(performance)
              };
              
              await github.rest.gists.create({
                description: 'Lighthouse Metrics',
                public: true,
                files: {
                  'frecklesmusic-lighthouse-metrics.json': {
                    content: JSON.stringify(metrics, null, 2)
                  },
                  'frecklesmusic-lighthouse-badge.json': {
                    content: JSON.stringify(badgeData, null, 2)
                  }
                }
              });
            }

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.run_id }}
          path: |
            .lighthouseci/
            docs/lighthouse-metrics.json
          if-no-files-found: warn
