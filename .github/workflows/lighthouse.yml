name: Lighthouse Analyze
on:
  workflow_dispatch:  # Только ручной или API-вызов (через wait-after-deploy.yml)

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Verify commit match
        run: |
          CURRENT_COMMIT=$(curl -sI https://fpsthirty.github.io/frecklesmusic/ | grep -i 'X-Git-Commit-ID:' | awk '{print $2}' | tr -d '\r')
          if [ "$CURRENT_COMMIT" != "${{ inputs.expected_commit }}" ]; then
            echo "::error::Commit mismatch! Current: ${CURRENT_COMMIT:-none}, Expected: ${{ inputs.expected_commit }}"
            exit 1
          fi
    
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Run Lighthouse CI
        id: run-lhci
        run: |
          lhci autorun --config=./lighthouserc.json --save-assets 2>&1 | tee ./lighthouse-output.log || echo "::warning::Lighthouse run completed"
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Lighthouse Metrics
        id: extract-metrics
        run: |
          mkdir -p docs

          if [ ! -f .lighthouseci/lhr-*.json ]; then
            echo "::error::No Lighthouse report found!"
            exit 1
          fi

          REPORT=$(ls -t .lighthouseci/lhr-*.json | head -1)

          # Сначала извлекаем все значения в переменные
          PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$REPORT")
          ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$REPORT")
          BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' "$REPORT")
          SEO=$(jq -r '.categories.seo.score * 100 | floor' "$REPORT")
          TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          # Формируем JSON с проверкой значений
          echo "{
            \"performance\": ${PERFORMANCE:-0},
            \"accessibility\": ${ACCESSIBILITY:-0},
            \"best_practices\": ${BEST_PRACTICES:-0},
            \"seo\": ${SEO:-0},
            \"timestamp\": \"${TIMESTAMP}\"
          }" > docs/frecklesmusic-lighthouse-metrics.json

          # Валидация JSON
          if ! jq empty docs/frecklesmusic-lighthouse-metrics.json 2>/dev/null; then
            echo "::error::Invalid JSON generated!"
            echo "Содержимое файла:"
            cat docs/frecklesmusic-lighthouse-metrics.json
            exit 1
          fi

      - name: Update Lighthouse Badge in Gist
        if: always()
        uses: actions/github-script@v6
        env:
          GIST_ID: "7b7563c9fbf4e1164894f86ed4284c18"
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const fs = require('fs');
            const metrics = JSON.parse(fs.readFileSync('docs/frecklesmusic-lighthouse-metrics.json'));
            
            // Добавляем задержку между запросами
            const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));
            
            const updateBadge = async (filename, data) => {
              await github.rest.gists.update({
                gist_id: process.env.GIST_ID,
                files: { [filename]: { content: JSON.stringify({
                  ...data,
                  cacheSeconds: 86400 // Кешировать на 24 часа
                }) } }
              });
              await sleep(3000); // 3 секунды между запросами
            };
            
            try {
              // Функция для определения цвета
              const getColor = (score) => {
                if (score >= 90) return 'brightgreen';
                if (score >= 80) return 'green';
                if (score >= 60) return 'yellow';
                if (score >= 40) return 'orange';
                return 'red';
              };
              
              // Обновляем бейджи с задержкой
              await updateBadge('frecklesmusic-lighthouse-perf.json', {
                schemaVersion: 1,
                label: "Performance",
                message: `${metrics.performance}`,
                color: getColor(metrics.performance),
                namedLogo: "lighthouse",
                style: "flat"
              });
              
              await updateBadge('frecklesmusic-lighthouse-a11y.json', {
                schemaVersion: 1,
                label: "Accessibility",
                message: `${metrics.accessibility}`,
                color: getColor(metrics.accessibility),
                namedLogo: "a11y",
                style: "flat"
              });
              
              await updateBadge('frecklesmusic-lighthouse-bp.json', {
                schemaVersion: 1,
                label: "Best Practices",
                message: `${metrics.best_practices}`,
                color: getColor(metrics.best_practices),
                namedLogo: "bestpractices",
                style: "flat"
              });
              
              await updateBadge('frecklesmusic-lighthouse-seo.json', {
                schemaVersion: 1,
                label: "SEO",
                message: `${metrics.seo}`,
                color: getColor(metrics.seo),
                namedLogo: "seo",
                style: "flat"
              });
              
              console.log('Все бейджи успешно обновлены с задержкой');
            } catch (error) {
              console.error('Ошибка при обновлении бейджей:', error);
              process.exit(1);
            }

      - name: Download Gist Files
        run: |
          curl -s -o lighthouse-gist-perf.json "https://gist.githubusercontent.com/fpsthirty/7b7563c9fbf4e1164894f86ed4284c18/raw/frecklesmusic-lighthouse-perf.json"
          curl -s -o lighthouse-gist-a11y.json "https://gist.githubusercontent.com/fpsthirty/7b7563c9fbf4e1164894f86ed4284c18/raw/frecklesmusic-lighthouse-a11y.json"
          curl -s -o lighthouse-gist-bp.json "https://gist.githubusercontent.com/fpsthirty/7b7563c9fbf4e1164894f86ed4284c18/raw/frecklesmusic-lighthouse-bp.json"
          curl -s -o lighthouse-gist-seo.json "https://gist.githubusercontent.com/fpsthirty/7b7563c9fbf4e1164894f86ed4284c18/raw/frecklesmusic-lighthouse-seo.json"
          curl -s -o lighthouse-gist-metrics.json "https://gist.githubusercontent.com/fpsthirty/7b7563c9fbf4e1164894f86ed4284c18/raw/frecklesmusic-lighthouse-metrics.json"

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.run_id }}
          path: |
            .lighthouseci/
            lighthouse-gist-*.json
            docs/frecklesmusic-lighthouse-metrics.json
          if-no-files-found: warn
