name: Lighthouse Analyze
on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      
      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Run Lighthouse CI
        id: run-lhci
        run: |
          lhci autorun --config=./lighthouserc.json --save-assets 2>&1 | tee ./lighthouse-output.log || echo "::warning::Lighthouse run completed"
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Lighthouse Metrics
        id: extract-metrics
        run: |
          mkdir -p docs

          if [ ! -f .lighthouseci/lhr-*.json ]; then
            echo "::error::No Lighthouse report found!"
            exit 1
          fi

          REPORT=$(ls -t .lighthouseci/lhr-*.json | head -1)

          # Сначала извлекаем все значения в переменные
          PERFORMANCE=$(jq -r '.categories.performance.score * 100 | floor' "$REPORT")
          ACCESSIBILITY=$(jq -r '.categories.accessibility.score * 100 | floor' "$REPORT")
          BEST_PRACTICES=$(jq -r '.categories["best-practices"].score * 100 | floor' "$REPORT")
          SEO=$(jq -r '.categories.seo.score * 100 | floor' "$REPORT")
          TIMESTAMP=$(date -u +'%Y-%m-%dT%H:%M:%SZ')

          # Формируем JSON с проверкой значений
          echo "{
            \"performance\": ${PERFORMANCE:-0},
            \"accessibility\": ${ACCESSIBILITY:-0},
            \"best_practices\": ${BEST_PRACTICES:-0},
            \"seo\": ${SEO:-0},
            \"timestamp\": \"${TIMESTAMP}\"
          }" > docs/frecklesmusic-lighthouse-metrics.json

          # Валидация JSON
          if ! jq empty docs/frecklesmusic-lighthouse-metrics.json 2>/dev/null; then
            echo "::error::Invalid JSON generated!"
            echo "Содержимое файла:"
            cat docs/frecklesmusic-lighthouse-metrics.json
            exit 1
          fi

      - name: Update Lighthouse Badge in Gist
        if: always()
        uses: actions/github-script@v6
        env:
          GIST_ID: "7b7563c9fbf4e1164894f86ed4284c18"
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            // Функция для определения цвета
            const getColor = (score) => {
              if (score >= 90) return 'brightgreen';
              if (score >= 80) return 'green';
              if (score >= 60) return 'yellow';
              if (score >= 40) return 'orange';
              return 'red';
            };
            
            // Создаем отдельные бейджи для каждой метрики
            const badges = {
              'frecklesmusic-lighthouse-perf.json': {
                schemaVersion: 1,
                label: "Performance",
                message: `${metrics.performance}`,
                color: getColor(metrics.performance),
                namedLogo: "lighthouse",
                style: "flat"
              },
              'frecklesmusic-lighthouse-a11y.json': {
                schemaVersion: 1,
                label: "Accessibility",
                message: `${metrics.accessibility}`,
                color: getColor(metrics.accessibility),
                namedLogo: "a11y",
                style: "flat"
              },
              'frecklesmusic-lighthouse-bp.json': {
                schemaVersion: 1,
                label: "Best Practices",
                message: `${metrics.best_practices}`,
                color: getColor(metrics.best_practices),
                namedLogo: "bestpractices",
                style: "flat"
              },
              'frecklesmusic-lighthouse-seo.json': {
                schemaVersion: 1,
                label: "SEO",
                message: `${metrics.seo}`,
                color: getColor(metrics.seo),
                namedLogo: "seo",
                style: "flat"
              }
            };
            
            // Обновляем Gist
            await github.rest.gists.update({
              gist_id: process.env.GIST_ID,
              files: Object.fromEntries(
                Object.entries(badges).map(([filename, data]) => [
                  filename,
                  { content: JSON.stringify(data, null, 2) }
                ])
              )
            });

      - name: Download Gist Files
        run: |
          curl -s -o lighthouse-gist-badge.json "https://gist.githubusercontent.com/fpsthirty/7b7563c9fbf4e1164894f86ed4284c18/raw/frecklesmusic-lighthouse-badge.json"
          curl -s -o lighthouse-gist-metrics.json "https://gist.githubusercontent.com/fpsthirty/7b7563c9fbf4e1164894f86ed4284c18/raw/frecklesmusic-lighthouse-metrics.json"

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.run_id }}
          path: |
            .lighthouseci/
            lighthouse-gist-badge.json
            lighthouse-gist-metrics.json
          if-no-files-found: warn
