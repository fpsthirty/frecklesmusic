name: Lighthouse
on:
  push:
    branches: [ main ]  # Запуск при push в main
  pull_request:         # Или при создании PR
  workflow_dispatch:    # Ручной запуск через UI
jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Update Actions
        run: |
          echo "Список доступных версий:"
          curl -s https://api.github.com/repos/actions/upload-artifact/tags | jq -r '.[].name'
      
      - uses: actions/checkout@v4
      
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18
      
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli
      
      - name: Install jq
        run: sudo apt-get install -y jq
      
      - name: Run Lighthouse CI
        id: run-lhci
        run: |
          # Запускаем Lighthouse и сохраняем логи в файл
          lhci autorun --config=./lighthouserc.json --save-assets 2>&1 | tee ./lighthouse-output.log || echo "::warning::Lighthouse run completed"
        
        env:
          LHCI_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Lighthouse Hash
        id: lh-hash
        run: |
          # Читаем лог из файла и ищем URL
          REPORT_URL=$(grep -o 'https://storage\.googleapis\.com/lighthouse-infrastructure\.appspot\.com/reports/[0-9-]\+\.report\.html' ./lighthouse-output.log || true)
          
          if [ -n "$REPORT_URL" ]; then
            # Извлекаем хеш из URL
            HASH=$(echo "$REPORT_URL" | sed 's|.*/reports/\([0-9-]*\)\.report\.html|\1|')
            echo "hash=${HASH}" >> $GITHUB_OUTPUT
            echo "Extracted Lighthouse hash: ${HASH}"
            
            # Дополнительно сохраняем хеш в файл
            echo "${HASH}" > ./lighthouse-hash.txt
          else
            echo "::error::Failed to extract Lighthouse report URL!"
            echo "hash=error" >> $GITHUB_OUTPUT
          fi

      - name: Prepare Lighthouse Artifacts
        run: |
          mkdir -p lighthouse-artifacts
          # Копируем ВСЕ возможные файлы отчётов
          cp -a .lighthouseci/ lighthouse-artifacts/ 2>/dev/null || true
          # Сохраняем хеш отдельно
          echo "${{ steps.lh-hash.outputs.hash }}" > lighthouse-artifacts/latest-hash.txt

      - name: Upload Permanent Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report-${{ github.run_id }}
          path: lighthouse-artifacts/
          if-no-files-found: ignore

      - name: Debug current files
        run: |
          echo "Содержимое .lighthouseci/:"
          ls -la .lighthouseci/
          echo "Содержимое lhci_reports/:"
          ls -la lhci_reports/ || echo "Папка не существует"
          echo "Содержимое docs/:"
          ls -la docs/
          echo "Текущий score:"
          cat docs/lighthouse-score.json || echo "Файл не найден"

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.lighthouseci/'

      - name: Extract Lighthouse Metrics
        run: |
          mkdir -p docs
          
          # Проверяем, что отчёт существует
          if [ ! -f .lighthouseci/lhr-*.json ]; then
            echo "::error::No Lighthouse report found!"
            exit 1
          fi
          
          # Извлекаем метрики с проверкой ошибок
          REPORT=$(ls -t .lighthouseci/lhr-*.json | head -1)
          PERFORMANCE=$(jq -r '.categories.performance.score? // 0 | . * 100 | floor' "$REPORT")
          ACCESSIBILITY=$(jq -r '.categories.accessibility.score? // 0 | . * 100 | floor' "$REPORT")
          BEST_PRACTICES=$(jq -r '.categories["best-practices"].score? // 0 | . * 100 | floor' "$REPORT")
          SEO=$(jq -r '.categories.seo.score? // 0 | . * 100 | floor' "$REPORT")
          
          # Генерируем JSON с проверкой
          echo "{
            \"performance\": $PERFORMANCE,
            \"accessibility\": $ACCESSIBILITY,
            \"best_practices\": $BEST_PRACTICES,
            \"seo\": $SEO
          }" > docs/lighthouse-metrics.json
          
          # Дополнительная проверка файла
          if ! jq empty docs/lighthouse-metrics.json 2>/dev/null; then
            echo "::error::Invalid JSON generated!"
            echo "{\"error\":\"invalid_data\"}" > docs/lighthouse-metrics.json
          fi
      - name: Validate JSON
        run: |
          echo "Проверяем файл метрик:"
          cat docs/lighthouse-metrics.json
          if ! jq empty docs/lighthouse-metrics.json; then
            echo "::error::Invalid JSON file!"
            exit 1
          fi
      - name: Save Score to Pages
        run: |
          mkdir -p docs
          echo "{\"score\":${{ steps.lh-score.outputs.score }}}" > docs/lighthouse-score.json
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add docs/lighthouse-score.json
          git commit -m "Update Lighthouse score: ${{ steps.lh-score.outputs.score }}%" || echo "No changes"
          git push
        if: success()
      - name: Debug score after updating
        run: |
          echo "Обновлённый score:"
          cat docs/lighthouse-score.json || echo "Файл не найден"
